{
  "version": 3,
  "sources": ["../src/ui/ui.js"],
  "sourcesContent": ["console.log('UI JS loaded: version test');\n// State Machine Plugin UI JavaScript\nimport './ui.css';\n\n// Constants\nconst RESET_TO_INITIAL = 'RESET_TO_INITIAL';\n\n// Global state\nlet componentData = [];\nlet selectedComponent = null;\nlet existingInteractions = {}; // Store existing interactions data\nlet currentInteraction = {\n  component: '',\n  primaryAction: '',\n  conditionalRules: []\n};\n\n// Initialize UI\ndocument.addEventListener('DOMContentLoaded', () => {\n  setupEventListeners();\n  // Send message to plugin that UI is loaded\n  parent.postMessage({ pluginMessage: { type: 'init' } }, '*');\n});\n\n// Setup event listeners\nfunction setupEventListeners() {\n  // Component list selection\n  document.getElementById('component-list')?.addEventListener('click', (e) => {\n    const item = e.target.closest('.component-item');\n    if (item) {\n      selectComponent(item.dataset.componentId);\n    }\n  });\n\n  // Primary action selection\n  document.getElementById('primary-action')?.addEventListener('change', (e) => {\n    currentInteraction.primaryAction = e.target.value;\n    updateRulePreview();\n  });\n\n  // Add conditional rule button\n  document.getElementById('add-rule')?.addEventListener('click', addConditionalRule);\n\n  // Create interaction button\n  document.getElementById('create-interaction')?.addEventListener('click', createInteraction);\n\n  // Cancel button\n  document.getElementById('cancel')?.addEventListener('click', () => {\n    parent.postMessage({ pluginMessage: { type: 'cancel' } }, '*');\n  });\n}\n\n// Add conditional rule function\nfunction addConditionalRule() {\n  console.log('addConditionalRule called');\n  const ruleId = Date.now();\n  const newRule = {\n    id: ruleId,\n    condition: '',\n    action: ''\n  };\n  \n  currentInteraction.conditionalRules.push(newRule);\n  renderConditionalRules();\n  updateRulePreview();\n}\n\n// Create interaction function\nfunction createInteraction() {\n  console.log('createInteraction called');\n  if (!currentInteraction.component || !currentInteraction.primaryAction) {\n    showStatus('Please select a component and primary action', 'error');\n    return;\n  }\n  \n  const interactionData = {\n    id: `${currentInteraction.component}_${Date.now()}`,\n    component: currentInteraction.component,\n    primaryAction: currentInteraction.primaryAction,\n    conditionalRules: currentInteraction.conditionalRules\n  };\n  \n  parent.postMessage({ \n    pluginMessage: { \n      type: 'create-interaction', \n      data: interactionData \n    } \n  }, '*');\n}\n\n// Update rule preview function\nfunction updateRulePreview() {\n  const previewText = document.getElementById('rule-preview-text');\n  if (!previewText) return;\n  \n  if (!currentInteraction.component || !currentInteraction.primaryAction) {\n    previewText.textContent = 'Select a component type and define the primary click action';\n    return;\n  }\n  \n  const componentName = selectedComponent?.name || 'Unknown Component';\n  const actionText = currentInteraction.primaryAction;\n  const rulesCount = currentInteraction.conditionalRules.length;\n  \n  let preview = `When ${componentName} is clicked, change to \"${actionText}\"`;\n  \n  if (rulesCount > 0) {\n    preview += `\\nApply ${rulesCount} conditional rule${rulesCount !== 1 ? 's' : ''} to other instances`;\n  }\n  \n  previewText.textContent = preview;\n}\n\n// Render conditional rules function\nfunction renderConditionalRules() {\n  const container = document.getElementById('conditional-rules');\n  if (!container) return;\n  \n  container.innerHTML = '';\n  \n  if (currentInteraction.conditionalRules.length === 0) {\n    container.innerHTML = '<div class=\"empty-rules\">No conditional rules added yet</div>';\n    return;\n  }\n  \n  currentInteraction.conditionalRules.forEach((rule, index) => {\n    const ruleElement = document.createElement('div');\n    ruleElement.className = 'conditional-rule-item';\n    ruleElement.innerHTML = `\n      <div class=\"rule-if-label\">If:</div>\n      <select class=\"rule-condition\" data-rule-index=\"${index}\" data-rule-part=\"condition\">\n        <option value=\"\">Select condition...</option>\n        ${generateConditionOptions()}\n      </select>\n      <div class=\"rule-then-label\">Then:</div>\n      <select class=\"rule-action\" data-rule-index=\"${index}\" data-rule-part=\"action\">\n        <option value=\"\">Select action...</option>\n        ${generateActionOptions()}\n      </select>\n      <button class=\"remove-rule\" data-rule-index=\"${index}\">\u00D7</button>\n    `;\n    \n    // Set current values\n    const conditionSelect = ruleElement.querySelector('[data-rule-part=\"condition\"]');\n    const actionSelect = ruleElement.querySelector('[data-rule-part=\"action\"]');\n    \n    if (conditionSelect) conditionSelect.value = rule.condition;\n    if (actionSelect) actionSelect.value = rule.action;\n    \n    // Add event listeners\n    conditionSelect?.addEventListener('change', (e) => {\n      currentInteraction.conditionalRules[index].condition = e.target.value;\n      updateRulePreview();\n    });\n    \n    actionSelect?.addEventListener('change', (e) => {\n      currentInteraction.conditionalRules[index].action = e.target.value;\n      updateRulePreview();\n    });\n    \n    ruleElement.querySelector('.remove-rule')?.addEventListener('click', () => {\n      removeConditionalRule(index);\n    });\n    \n    container.appendChild(ruleElement);\n  });\n}\n\n// Generate condition options\nfunction generateConditionOptions() {\n  if (!selectedComponent) return '';\n  \n  const options = [];\n  Object.entries(selectedComponent.properties).forEach(([propName, values]) => {\n    values.forEach(value => {\n      options.push(`<option value=\"${propName}=${value}\">${propName} = ${value}</option>`);\n    });\n  });\n  \n  return options.join('');\n}\n\n// Generate action options\nfunction generateActionOptions() {\n  if (!selectedComponent) return '';\n  \n  const options = [];\n  Object.entries(selectedComponent.properties).forEach(([propName, values]) => {\n    values.forEach(value => {\n      options.push(`<option value=\"${propName}=${value}\">${propName} = ${value}</option>`);\n    });\n  });\n  \n  options.push(`<option value=\"${RESET_TO_INITIAL}\">Reset to initial state</option>`);\n  \n  return options.join('');\n}\n\n// Remove conditional rule function\nfunction removeConditionalRule(index) {\n  currentInteraction.conditionalRules.splice(index, 1);\n  renderConditionalRules();\n  updateRulePreview();\n}\n\n// Update primary action states function\nfunction updatePrimaryActionStates() {\n  const primaryActionSelect = document.getElementById('primary-action');\n  if (!primaryActionSelect || !selectedComponent) return;\n  \n  primaryActionSelect.innerHTML = '<option value=\"\">Select target state...</option>';\n  \n  Object.entries(selectedComponent.properties).forEach(([propName, values]) => {\n    values.forEach(value => {\n      const option = document.createElement('option');\n      option.value = `${propName}=${value}`;\n      option.textContent = `${propName} = ${value}`;\n      primaryActionSelect.appendChild(option);\n    });\n  });\n}\n\n// Populate existing interaction function\nfunction populateExistingInteraction(interaction) {\n  currentInteraction = { ...interaction };\n  updatePrimaryActionStates();\n  \n  const primaryActionSelect = document.getElementById('primary-action');\n  if (primaryActionSelect) {\n    primaryActionSelect.value = interaction.primaryAction;\n  }\n  \n  renderConditionalRules();\n  updateRulePreview();\n}\n\n// Reset interaction builder function\nfunction resetInteractionBuilder() {\n  currentInteraction = {\n    component: '',\n    primaryAction: '',\n    conditionalRules: []\n  };\n  \n  const primaryActionSelect = document.getElementById('primary-action');\n  if (primaryActionSelect) {\n    primaryActionSelect.innerHTML = '<option value=\"\">Select target state...</option>';\n  }\n  \n  renderConditionalRules();\n  updateRulePreview();\n}\n\n// Show status function\nfunction showStatus(message, type = 'info') {\n  const statusEl = document.getElementById('status');\n  if (!statusEl) return;\n  \n  statusEl.textContent = message;\n  statusEl.className = `status ${type}`;\n  statusEl.style.display = 'block';\n  \n  // Auto-hide after 5 seconds\n  setTimeout(() => {\n    statusEl.style.display = 'none';\n  }, 5000);\n}\n\n// Listen for messages from plugin\nwindow.onmessage = (event) => {\n  const msg = event.data.pluginMessage;\n  \n  switch (msg.type) {\n    case 'selection-changed': {\n      // Show loading state when selection changes\n      resetUIState();\n      const loadingEl = document.getElementById('loading');\n      const emptyStateEl = document.getElementById('empty-state');\n      const componentListEl = document.getElementById('component-list');\n      \n      if (loadingEl) loadingEl.style.display = 'block';\n      if (emptyStateEl) emptyStateEl.style.display = 'none';\n      if (componentListEl) componentListEl.style.display = 'none';\n      break;\n    }\n    case 'init-success':\n      handleInitSuccess(msg.data);\n      break;\n    case 'error': {\n      showStatus(msg.message, 'error');\n      resetUIState();\n      const loadingEl = document.getElementById('loading');\n      const emptyStateEl = document.getElementById('empty-state');\n      const componentListEl = document.getElementById('component-list');\n      \n      if (loadingEl) loadingEl.style.display = 'none';\n      if (emptyStateEl) emptyStateEl.style.display = 'block';\n      if (componentListEl) componentListEl.style.display = 'none';\n      break;\n    }\n    case 'interaction-created':\n      showStatus(msg.message, 'success');\n      resetInteractionBuilder();\n      break;\n    default:\n      console.log('Unknown message type:', msg.type);\n  }\n};\n\n// Handle successful initialization\nfunction handleInitSuccess(data) {\n  componentData = data.components;\n  existingInteractions = data.existingInteractions || {};\n  \n  // Reset UI state\n  resetUIState();\n  \n  const loadingEl = document.getElementById('loading');\n  const emptyStateEl = document.getElementById('empty-state');\n  const componentListEl = document.getElementById('component-list');\n  \n  if (loadingEl) loadingEl.style.display = 'none';\n  \n  if (componentData.length === 0) {\n    if (emptyStateEl) emptyStateEl.style.display = 'block';\n    if (componentListEl) componentListEl.style.display = 'none';\n  } else {\n    if (emptyStateEl) emptyStateEl.style.display = 'none';\n    renderComponentList();\n    if (componentListEl) componentListEl.style.display = 'block';\n  }\n}\n\n// Reset UI state when selection changes\nfunction resetUIState() {\n  // Clear any selected component\n  selectedComponent = null;\n  \n  // Hide rule builder and show no-selection state\n  const ruleBuilderEl = document.getElementById('rule-builder');\n  const noSelectionEl = document.getElementById('no-selection');\n  \n  if (ruleBuilderEl) ruleBuilderEl.classList.remove('active');\n  if (noSelectionEl) noSelectionEl.style.display = 'block';\n  \n  // Reset interaction builder\n  resetInteractionBuilder();\n  \n  // Clear any status messages\n  const statusEl = document.getElementById('status');\n  if (statusEl) statusEl.style.display = 'none';\n}\n\n// Render component list\nfunction renderComponentList() {\n  const list = document.getElementById('component-list');\n  if (!list) return;\n  \n  list.innerHTML = '';\n\n  componentData.forEach(component => {\n    const li = document.createElement('li');\n    li.className = 'component-item';\n    li.dataset.componentId = component.id;\n    \n    const propertiesCount = Object.keys(component.properties).length;\n    const instancesCount = component.instances.length;\n    \n    // Check if this component has existing interactions\n    const hasExistingInteraction = existingInteractions[component.id];\n    const interactionIndicator = hasExistingInteraction ? ' \uD83C\uDF9B\uFE0F' : '';\n    \n    li.innerHTML = `\n      <div class=\"component-name\">\uD83E\uDDE9 ${component.name}${interactionIndicator}</div>\n      <div class=\"component-info\">\n        Rules apply to ${instancesCount} instance${instancesCount !== 1 ? 's' : ''} \u2022 \n        ${propertiesCount} variant propert${propertiesCount !== 1 ? 'ies' : 'y'}\n        ${hasExistingInteraction ? ' \u2022 Has existing interactions' : ''}\n      </div>\n    `;\n    \n    list.appendChild(li);\n  });\n}\n\n// Select component\nfunction selectComponent(componentId) {\n  // Update UI selection\n  document.querySelectorAll('.component-item').forEach(item => {\n    item.classList.remove('selected');\n  });\n  const selectedItem = document.querySelector(`[data-component-id=\"${componentId}\"]`);\n  if (selectedItem) selectedItem.classList.add('selected');\n\n  // Update selected component and current interaction\n  selectedComponent = componentData.find(c => c.id === componentId);\n  currentInteraction.component = componentId;\n  \n  // Show rule builder\n  const noSelectionEl = document.getElementById('no-selection');\n  const ruleBuilderEl = document.getElementById('rule-builder');\n  \n  if (noSelectionEl) noSelectionEl.style.display = 'none';\n  if (ruleBuilderEl) ruleBuilderEl.classList.add('active');\n  \n  // Update dropdowns\n  updatePrimaryActionStates();\n  \n  // Check for existing interactions and populate UI\n  const existingInteraction = existingInteractions[componentId];\n  if (existingInteraction) {\n    populateExistingInteraction(existingInteraction);\n  } else {\n    resetInteractionBuilder();\n  }\n  \n  renderConditionalRules();\n} "],
  "mappings": "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",
  "names": ["RESET_TO_INITIAL", "componentData", "selectedComponent", "existingInteractions", "currentInteraction", "setupEventListeners", "_a", "_b", "_c", "_d", "_e", "e", "item", "selectComponent", "updateRulePreview", "addConditionalRule", "createInteraction", "newRule", "renderConditionalRules", "showStatus", "interactionData", "previewText", "componentName", "actionText", "rulesCount", "preview", "container", "rule", "index", "ruleElement", "generateConditionOptions", "generateActionOptions", "conditionSelect", "actionSelect", "removeConditionalRule", "options", "propName", "values", "value", "updatePrimaryActionStates", "primaryActionSelect", "option", "populateExistingInteraction", "interaction", "__spreadValues", "resetInteractionBuilder", "message", "type", "statusEl", "event", "msg", "resetUIState", "loadingEl", "emptyStateEl", "componentListEl", "handleInitSuccess", "data", "renderComponentList", "ruleBuilderEl", "noSelectionEl", "list", "component", "li", "propertiesCount", "instancesCount", "hasExistingInteraction", "interactionIndicator", "componentId", "selectedItem", "c", "existingInteraction"]
}
